{"version":3,"sources":["game/game-utils/Algorithm.ts","game/controls/Direction.ts","game/game-utils/Position.ts","game/game-utils/HeapQueue.ts","game/game-utils/GameUtils.ts","game/players/AStarPlayer.ts","game/players/HamiltonianPlayer.ts","game/players/HumanPlayer.ts","game/controls/SnakeLinkedList.ts","game/controls/Snake.ts","game/controls/SnakeGame.ts","components/GameOver/GameOverInfo.tsx","components/GameOver/GameOverInfos.tsx","components/GameOver/GameOver.tsx","components/ScoreBoard/ScoreBoard.tsx","components/Settings/Settings.tsx","components/SnakeBoard/Square.tsx","components/SnakeBoard/SnakeBoard.tsx","components/SnakeGameUI/SnakeGameUI.tsx","components/Home/Home.tsx","components/Info/Info.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Algorithm","Direction","Position","row","column","this","position","getColumn","getRow","HeapQueue","cmp","length","data","a","b","item","priority","push","Item","parent","x","pos","getPriority","Error","last_val","pop","ret","left","right","minIndex","last","getData","strategy","GameUtils","dimensions","allDirections","map","direction","applyDirection","filter","isValidPositionWithoutSnake","position1","position2","equals","snake","isBody","isHead","currentNode","UP","LEFT","RIGHT","DOWN","AStarPlayer","moves","game","visualize","visualizationSpeed","console","info","getBoard","current","clearVisualization","computeNextPath","then","getMoveToSurvive","Promise","resolve","reject","validDirections","nextPosition","getHeadSnakePosition","isValidPosition","getDimensions","getSnake","neighbours","neighbour","AStarNode","createAStarNode","currentNodeID","targetNode","getApplePosition","exploredNodes","Set","priorityQueue","setStrategy","insert","rejet","isEmpty","getPosition","result","reconstructPath","e","setTimeout","setSinglePosition","getPositionID","has","add","getNeighbours","i","tempNode","getDistance","getCost","Math","abs","directions","getParentNode","getDirection","cost","heuristicValue","parentNode","heuristic","HamiltonianPlayer","nextMove","Map","computeHamiltonianPath","visitedPostions","positionList","positionId","log","size","reduce","imul","getNeighboursWithoutSnake","positionReturned","set","delete","headPositionID","get","controlKeys","controlKeysOposite","HumanPlayer","move","document","addEventListener","event","key","getLastMovement","getSnakeLength","isSnakeMoving","resume","pause","SnakeLinkedList","positions","nextNode","previousNode","tail","setPosition","getTail","setPreviousNode","apple","newNextNode","setNextNode","getPreviousNode","updateTail","Snake","rows","columns","bodySet","forEach","movement","applePosition","previousHeadPosition","nextHeadPosition","isApple","previousTail","tailPositionID","affectedPositons","getSize","appleEaten","affectedPositions","SnakeGame","speed","board","scoreBoard","player","setIsGameOver","lastMovement","isMoving","keepMoving","speedControl","score","steps","gameCount","initializeGame","clearInterval","init","setGame","initialPosition","getRandomInitialPosition","getRandomApplePosition","setInitialColors","window","requestAnimationFrame","clearTimeout","cancelAnimationFrame","algorithm","HUMAN","HAMILTONIANCYCLE","floor","random","setRow","setColumn","getNextMove","nextMovement","setLastMovement","increaseSteps","increaseScore","affectedPosition","resetInterval","catch","error","saveGame","classNames","j","getHeadPosition","GameOverInfo","props","className","title","content","GameOverInfos","children","GameOver","show","style","height","width","marginTop","backgroundColor","onClick","clearScoreBoard","restartGameCallback","ScoreBoard","id","state","getInitialState","setState","prevState","firstScore","toString","stepCount","avgSteps","round","Number","EPSILON","scoreList","increase","newState","getNewState","concat","React","Component","Settings","flex","padding","display","justifyContent","type","min","max","defaultValue","onChange","setSpeed","currentTarget","valueAsNumber","defaultChecked","changeVisualize","name","value","setAlgorithm","ASTAR","Square","join","SnakeBoard","boardSquares","boardProps","initializeBoard","Array","createRef","changeColor","newClassNames","flatMap","ref","gridTemplate","displayBoard","propsBoard","snakeGame","debug","setPlayer","getPlayer","SnakeGameUI","useState","isGameOver","useEffect","setBoard","flexDirection","alignItems","top","alignContent","fontFamily","textAlign","Home","Info","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41c06f10.chunk.js","sourcesContent":["enum Algorithm {\n  HUMAN, ASTAR, HAMILTONIANCYCLE\n}\n\nexport default Algorithm;","enum Direction {\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT,\n}\n\nexport default Direction;","export default class Position {\n    setColumn(column: number) {\n        this.column = column;\n    }\n    setRow(row: number) {\n        this.row = row;\n    }\n    private row: number;\n    private column: number;\n\n    constructor(row: number, column: number) {\n        this.row = row;\n        this.column = column\n    }\n\n    equals(position: Position){\n        return position.getColumn() === this.getColumn() && \n               position.getRow() === this.getRow();\n    }\n\n    compareRows(position:Position){\n        if(position.getRow() === this.getRow()) return 0;\n        if(position.getRow() < this.getRow()) return 1;\n        return -1;\n    }\n    \n    compareColumns(position:Position){\n        if(position.getColumn() === this.getColumn()) return 0;\n        if(position.getColumn() < this.getColumn()) return 1;\n        return -1;\n    }\n\n    getRow(){\n        return this.row;\n    }\n\n    getColumn(){\n        return this.column;\n    }\n    toList() {\n        return [this.row, this.column];\n    }\n}","import { PriorityQueue } from \"./PriorityQueue\";\n\n\n\n/*\n * This implementation is very loosely based off js-priority-queue\n * by Adam Hooper from https://github.com/adamhooper/js-priority-queue\n *\n * The js-priority-queue implementation seemed a teensy bit bloated\n * with its require.js dependency and multiple storage strategies\n * when all but one were strongly discouraged. So here is a kind of\n * condensed version of the functionality with only the features that\n * I particularly needed.\n *\n * Using it is pretty simple, you just create an instance of HeapQueue\n * while optionally specifying a comparator as the argument:\n *\n * var heapq = new HeapQueue();\n *\n * var customq = new HeapQueue(function(a, b){\n *   // if b > a, return negative\n *   // means that it spits out the smallest item first\n *   return a - b;\n * });\n *\n * Note that in this case, the default comparator is identical to\n * the comparator which is used explicitly in the second queue.\n *\n * Once you've initialized the heapqueue, you can plop some new\n * elements into the queue with the push method (vaguely reminiscent\n * of typical javascript arays)\n *\n * heapq.push(42);\n * heapq.push(\"kitten\");\n *\n * The push method returns the new number of elements of the queue.\n *\n * You can push anything you'd like onto the queue, so long as your\n * comparator function is capable of handling it. The default\n * comparator is really stupid so it won't be able to handle anything\n * other than an number by default.\n *\n * You can preview the smallest item by using peek.\n *\n * heapq.push(-9999);\n * heapq.peek(); // ==> -9999\n *\n * The useful complement to to the push method is the pop method,\n * which returns the smallest item and then removes it from the\n * queue.\n *\n * heapq.push(1);\n * heapq.push(2);\n * heapq.push(3);\n * heapq.pop(); // ==> 1\n * heapq.pop(); // ==> 2\n * heapq.pop(); // ==> 3\n */\n\nexport class HeapQueue<T> implements PriorityQueue<T> {\n    \n    private cmp: any;\n    private length: number;\n    private data: Item<T>[];\n    constructor() {\n        this.cmp = function (a, b) { return a - b; };\n        this.length = 0;\n        this.data = [];\n    }\n    insert(item: T, priority: number): void {\n        this.data.push(new Item(item,priority));\n\n        var pos = this.data.length - 1, parent, x;\n\n        while (pos > 0) {\n            parent = (pos - 1) >>> 1;\n            if (this.cmp(this.data[pos].getPriority(), this.data[parent].getPriority()) < 0) {\n                x = this.data[parent];\n                this.data[parent] = this.data[pos];\n                this.data[pos] = x;\n                pos = parent;\n            } else break;\n        }\n\n        this.length+=1;\n        return;\n    }\n    peek(): T {\n        throw new Error(\"Method not implemented.\");\n    }\n    pop(): T {\n        let last_val = this.data.pop();\n        let ret = this.data[0];\n        if (this.data.length > 0) {\n            this.data[0] = last_val;\n            var pos = 0,\n                last = this.data.length - 1,\n                left, right, minIndex, x;\n            while (1) {\n                left = (pos << 1) + 1;\n                right = left + 1;\n                minIndex = pos;\n                if (left <= last && this.cmp(this.data[left].getPriority(), this.data[minIndex].getPriority()) < 0) minIndex = left;\n                if (right <= last && this.cmp(this.data[right].getPriority(), this.data[minIndex].getPriority()) < 0) minIndex = right;\n                if (minIndex !== pos) {\n                    x = this.data[minIndex];\n                    this.data[minIndex] = this.data[pos];\n                    this.data[pos] = x;\n                    pos = minIndex;\n                } else break;\n            }\n        } else {\n            ret = last_val;\n        }\n        this.length--;\n        return ret.getData();\n    }\n    size(): number {\n        return this.length;\n    }\n    isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    setStrategy(strategy: string): void {\n        if(strategy === 'max'){\n            this.cmp = (a:number,b:number) => (a-b);\n        }else if(strategy === 'min'){\n            this.cmp = (a:number,b:number) => -1*(a-b);\n\n        }\n    }\n\n    \n}\n\nclass Item<T> {\n    private data :T;\n    private priority: number;\n    constructor(data:T, priority:number){\n        this.data = data;\n        this.priority = priority;\n    }\n\n\n    getData(){\n        return this.data;\n    }\n    getPriority(){\n        return this.priority;\n    }\n}","import Direction from \"../controls/Direction\";\nimport Snake from \"../controls/Snake\";\nimport Position from \"./Position\";\n\nexport class GameUtils{\n    static getNeighboursWithoutSnake(position: Position, dimensions: [number,number]) {\n        return GameUtils.allDirections\n            .map(direction => GameUtils.applyDirection(position, direction))\n            .filter(position => GameUtils.isValidPositionWithoutSnake(position, dimensions));\n    }\n    static allDirections = [Direction.UP, Direction.DOWN, Direction.LEFT, Direction.RIGHT];\n    \n    static getDirection(position1: Position, position2: Position): Direction {\n        return GameUtils.allDirections\n                     .filter(direction => this.applyDirection(position1,direction).equals(position2))\n                     .pop();\n    }\n    static isValidPosition(position: Position, dimensions: [number,number], snake: Snake): boolean {\n        return !(position.getRow() < 0 ||\n         position.getRow() >= dimensions[0] ||\n         position.getColumn() < 0 ||\n         position.getColumn() >= dimensions[1] ||\n         snake.isBody(position) ||\n         snake.isHead(position));\n    }\n    static isValidPositionWithoutSnake(position: Position, dimensions: [number,number]): boolean {\n        return !(position.getRow() < 0 ||\n         position.getRow() >= dimensions[0] ||\n         position.getColumn() < 0 ||\n         position.getColumn() >= dimensions[1]);\n    }\n    static applyDirection(currentNode: Position, direction: Direction, ): Position {\n        switch (direction) {\n            case Direction.UP:\n                return new Position(currentNode.getRow() - 1, currentNode.getColumn());\n            case Direction.LEFT:\n                return new Position(currentNode.getRow(), currentNode.getColumn() - 1);\n            case Direction.RIGHT:\n                return new Position(currentNode.getRow(), currentNode.getColumn() + 1);\n            default:\n                return new Position(currentNode.getRow() + 1, currentNode.getColumn());\n        }\n    }\n\n    static getPositionID(position: Position, dimensions: [number,number]): number {\n        return dimensions[1] * position.getRow() + position.getColumn();\n    }\n\n}\n\n","\nimport Direction from \"../controls/Direction\";\nimport SnakeGame from \"../controls/SnakeGame\";\nimport Player from \"./Player\";\nimport { HeapQueue } from \"../game-utils/HeapQueue\";\nimport Position from \"../game-utils/Position\";\nimport { GameUtils } from \"../game-utils/GameUtils\";\n\n\nclass AStarPlayer implements Player {\n    private moves: Direction[] = [];\n    private game: SnakeGame;\n    private visualize: boolean = true;\n    private visualizationSpeed: number = 5;\n\n    init() {\n        console.info(\"[Player] A* player\");\n    }\n\n    setGame(game: SnakeGame): void {\n        this.game = game;\n    }\n\n    changeVisualize(): void {\n        this.visualize = !this.visualize;\n        if (!this.visualize) {\n            this.game.getBoard().current.clearVisualization();\n        }\n    }\n\n    async getNextMove(): Promise<Direction> {\n        if (this.moves.length === 0) {\n            if (this.visualize) {\n                this.game.getBoard().current.clearVisualization();\n            }\n            return this.computeNextPath().then(moves => {\n                this.moves = moves;\n                if (this.moves.length === 0){\n                    return this.getMoveToSurvive();\n                }\n                return this.moves.pop();\n            });\n        }\n        return new Promise((resolve, reject) => resolve(this.moves.pop()));\n    }\n    getMoveToSurvive(): Direction {\n        let validDirections = GameUtils.allDirections\n                .filter(direction => {\n                    let nextPosition = GameUtils.applyDirection(this.game.getHeadSnakePosition(),direction)\n                    return GameUtils.isValidPosition(nextPosition, this.game.getDimensions(), this.game.getSnake());\n                })\n        if(validDirections){\n            return validDirections.pop();\n        }else{\n            return Direction.DOWN;\n        }\n    \n    }\n\n    computeNextPath(): Promise<Direction[]> {\n        let moves: Direction[] = []\n        let currentNode = AStarNode.createAStarNode(this.game.getHeadSnakePosition(), 0, 0, null);\n        let currentNodeID = null;\n        let targetNode = this.game.getApplePosition();\n\n        let exploredNodes = new Set<number>();\n        let priorityQueue = new HeapQueue<AStarNode>();\n        priorityQueue.setStrategy('max');\n        priorityQueue.insert(currentNode, currentNode.getPriority());\n        let neighbours: Position[];\n        let neighbour: Position;\n\n        return new Promise(async (resolve, rejet) => {\n            while (!priorityQueue.isEmpty()) {\n                currentNode = priorityQueue.pop();\n                if (currentNode.getPosition().equals(targetNode)) {\n                    let result = this.reconstructPath(currentNode);\n                    moves = result.map(e => e.direction);\n                    if (this.visualize) {\n                        for (let e of result) {\n                            //Visualize changed\n                            if (!this.visualize) {\n                                this.game.getBoard().current.clearVisualization();\n                                break;\n                            }\n                            await new Promise<void>((resolve) => setTimeout(() => {\n                                if (!this.game.getApplePosition().equals(e.nextPosition) && this.visualize) {\n                                    resolve(this.game.setSinglePosition(e.nextPosition, [\"path\"]))\n                                }else{\n                                    resolve();\n                                }\n                            }, this.visualizationSpeed*10));\n                        }\n                        //Wait for visualization to end\n                        await new Promise<void>((resolve) => setTimeout(() => {\n                            resolve();\n                        }, this.visualizationSpeed*100));\n                        break;\n                    }\n                }\n                currentNodeID = this.getPositionID(currentNode.getPosition());\n                if (exploredNodes.has(currentNodeID)) {\n                    continue;\n                }\n                exploredNodes.add(currentNodeID);\n                if (this.visualize) {\n                    await new Promise((resolve) => setTimeout(() => {\n                        if (this.visualize) {\n                            //resolve(this.game.setSinglePosition(currentNode.getPosition(), [\"explored\"]))\n                            resolve(1)\n                        }else{\n                            this.game.getBoard().current.clearVisualization();\n                        }\n                    }, this.visualizationSpeed*0.1));\n\n                }\n                neighbours = this.getNeighbours(currentNode.getPosition())\n                    .filter(neighbour => !exploredNodes.has(this.getPositionID(neighbour)));\n                for (let i = 0; i < neighbours.length; i++) {\n                    neighbour = neighbours[i];\n\n                    let tempNode = AStarNode.createAStarNode(neighbour,\n                        this.getDistance(neighbour, targetNode),\n                        currentNode.getCost() + 1, currentNode);\n                    priorityQueue.insert(tempNode, tempNode.getPriority());\n                    if (this.visualize) {\n                        await new Promise((resolve) => setTimeout(() =>\n                            resolve(this.game.setSinglePosition(tempNode.getPosition(), [\"expanded\"])), this.visualizationSpeed*0.1));\n                    }\n                }\n\n\n            }\n            return resolve(moves);\n        });\n    }\n    getDistance(neighbour: Position, targetNode: Position): number {\n        return Math.abs(neighbour.getRow() - targetNode.getRow()) +\n            Math.abs(neighbour.getColumn() - targetNode.getColumn());\n    }\n\n    getPositionID(position: Position): number {\n        return this.game.getDimensions()[1] * position.getRow() + position.getColumn();\n    }\n\n    getNeighbours(currentNode: Position): Position[] {\n        return GameUtils.allDirections\n            .map(direction => GameUtils.applyDirection(currentNode, direction))\n            .filter(position => GameUtils.isValidPosition(position, this.game.getDimensions(), this.game.getSnake()));\n    }\n\n    reconstructPath(currentNode: AStarNode): { direction: Direction, nextPosition: Position }[] {\n        if (currentNode === null) {\n            return [];\n        }\n        let directions: { direction: Direction, nextPosition: Position }[] = [];\n        while (currentNode.getParentNode() !== null) {\n            directions.push({\n                direction: GameUtils.getDirection(currentNode.getParentNode().getPosition(),\n                    currentNode.getPosition()),\n                nextPosition: currentNode.getParentNode().getPosition()\n            })\n\n            currentNode = currentNode.getParentNode();\n        }\n        return directions;\n    }\n}\nexport default AStarPlayer;\n\nclass AStarNode {\n    static createAStarNode(position: Position, cost: number, heuristic: number, parentNode: AStarNode) {\n        return new AStarNode(position, cost, heuristic, parentNode);\n    }\n\n    private position: Position;\n    private heuristicValue: number;\n    private cost: number;\n    private parentNode: AStarNode;\n\n    private constructor(position: Position, cost: number, heuristicValue: number, parentNode: AStarNode) {\n        this.position = position;\n        this.cost = cost;\n        this.heuristicValue = heuristicValue;\n        this.parentNode = parentNode;\n    }\n\n    getPosition() {\n        return this.position;\n    }\n\n    getPriority() {\n        return this.heuristicValue + this.cost;\n    }\n\n    getHeuristicValue() {\n        return this.heuristicValue;\n    }\n\n    getCost() {\n        return this.cost;\n    }\n\n    getParentNode() {\n        return this.parentNode;\n    }\n}\n\n\n","\nimport Direction from \"../controls/Direction\";\nimport SnakeGame from \"../controls/SnakeGame\";\nimport Player from \"./Player\";\nimport Position from \"../game-utils/Position\";\nimport { GameUtils } from \"../game-utils/GameUtils\";\n\n\nclass HamiltonianPlayer implements Player {\n    private nextMove: Map<number, Direction>;\n    private game: SnakeGame;\n    \n\n\n    init() {\n        console.info(\"[Player] Hamiltonian player\");\n    }\n\n    setGame(game: SnakeGame): void {\n        this.game = game;\n        this.nextMove = new Map();\n        this.computeHamiltonianPath();\n    }\n\n    computeHamiltonianPath(visitedPostions = new Set<number>(), positionList: Position[] = [new Position(0,0)]) {\n        \n        let position = positionList.pop();\n        let positionId = GameUtils.getPositionID(position,this.game.getDimensions());\n        console.log(`Row: ${position.getRow()}  Column: ${position.getColumn()}`)\n        if(positionList.length===0 && \n           this.nextMove.size === this.game.getDimensions().reduce(Math.imul)-1 ){\n            // Path found\n            return position;\n        }\n        //isVisited\n        if (visitedPostions.has(positionId)){\n            //backtrack\n            return new Position(-1,-1);\n        }\n        \n        let neighbours = GameUtils.getNeighboursWithoutSnake(position, this.game.getDimensions())\n            .filter(neighbour => !visitedPostions.has(GameUtils.getPositionID(neighbour,this.game.getDimensions())))\n        \n        visitedPostions.add(positionId);\n        if(neighbours.length!==0){\n            for(let neighbour of neighbours){\n                positionList.push(neighbour);\n                let positionReturned = this.computeHamiltonianPath(visitedPostions, positionList);\n                if (positionReturned.getRow()!==-1){\n                    //Path Found\n                    this.nextMove.set(positionId,GameUtils.getDirection(position, positionReturned))\n                    return position\n                }\n            }\n            visitedPostions.delete(positionId);\n            return new Position(-1,-1);\n            //backtrack\n        }else{\n            if(positionList.length===0){\n                //backtrack\n                visitedPostions.delete(positionId);\n                return new Position(-1,-1);\n            }\n            let positionReturned = this.computeHamiltonianPath(visitedPostions, positionList);\n            if (positionReturned.getRow()!==-1){\n                //Path Found\n                this.nextMove.set(positionId,GameUtils.getDirection(position, positionReturned))\n                return position\n            }\n            \n            visitedPostions.delete(positionId);\n            return new Position(-1,-1);\n\n        }\n        \n        //backtrack\n        visitedPostions.delete(positionId);\n        return new Position(-1,-1);\n        \n        \n    }\n\n    changeVisualize(): void {\n        /*Not implemented yet*/\n    }\n\n    async getNextMove(): Promise<Direction> {\n        /*Not implemented yet*/\n        return new Promise((resolve, reject) => {\n            let headPositionID = GameUtils.getPositionID(this.game.getHeadSnakePosition(),this.game.getDimensions())\n            resolve( this.nextMove.get(headPositionID))});\n    }\n    \n    getNeighbours(currentNode: Position): Position[] {\n        return GameUtils.allDirections\n            .map(direction => GameUtils.applyDirection(currentNode, direction))\n            .filter(position => GameUtils.isValidPosition(position, this.game.getDimensions(), this.game.getSnake()));\n    }\n\n}\nexport default HamiltonianPlayer;","\nimport Direction from \"../controls/Direction\";\nimport SnakeGame from \"../controls/SnakeGame\";\nimport Player from \"./Player\";\n\n\nconst controlKeys = {\n    'ArrowDown': Direction.DOWN,\n    'ArrowUp': Direction.UP,\n    'ArrowLeft': Direction.LEFT,\n    'ArrowRight': Direction.RIGHT\n}\nconst controlKeysOposite = {\n    'ArrowDown': Direction.UP,\n    'ArrowUp': Direction.DOWN,\n    'ArrowLeft': Direction.RIGHT,\n    'ArrowRight': Direction.LEFT\n}\nclass HumanPlayer implements Player {\n\n    private move = Direction.DOWN;\n    private game: SnakeGame;\n\n    init(): void {\n        document.addEventListener(\"keydown\", (event) => {\n            switch (event.key) {\n                case 'ArrowDown':\n                case 'ArrowRight':\n                case 'ArrowUp':\n                case 'ArrowLeft':\n                    if ((this.game.getLastMovement() !== controlKeysOposite[event.key]) || this.game.getSnakeLength() === 1) {\n                        this.move = controlKeys[event.key];\n                        if (!this.game.isSnakeMoving()) {\n                            this.game.resume();\n                        }\n                    }\n                    break;\n                case 'p':\n                    if (this.game.isSnakeMoving()) {\n                        console.log(\"pausing\");\n                        this.game.pause();\n                        return;\n                    }\n                    this.game.resume();\n            }\n        }, false)\n    }\n\n    changeVisualize(): void {\n        //No action\n    }\n    setGame(game: SnakeGame): void {\n        this.game = game;\n    }\n\n    getNextMove(): Promise<Direction> {\n        return new Promise((resolve, reject) => resolve(this.move));\n    }\n}\n\nexport default HumanPlayer;\n","import Position from \"../game-utils/Position\";\n\nclass SnakeLinkedList {\n\n    private position: Position;\n    private nextNode: SnakeLinkedList | null;\n    private previousNode: SnakeLinkedList | null;\n    private tail: SnakeLinkedList; //keep track of tail only coherent for the head\n\n\n    constructor(positions: Array<Position>) {\n        if (positions.length) {\n            let position = positions.pop()\n            this.setPosition(position);\n            this.nextNode = new SnakeLinkedList(positions);\n            this.nextNode.previousNode = this;\n            this.tail = this.nextNode.getTail();\n        }\n        this.tail = this;\n        this.nextNode = null;\n    }\n    getPosition(): Position {\n        return this.position;\n    }\n\n    getNextNode() {\n        return this.nextNode;\n    }\n\n    getTail() {\n        return this.tail;\n    }\n\n    setPosition(position: Position) {\n        this.position = position;\n    }\n    setNextNode(nextNode: SnakeLinkedList) {\n        this.nextNode = nextNode;\n        if (nextNode!=null) {\n            this.nextNode.setPreviousNode(this);\n            this.tail = this.nextNode.getTail();\n        } else {\n            this.tail = this;\n        }\n    }\n    setPreviousNode(previousNode: SnakeLinkedList) {\n        this.previousNode = previousNode\n    }\n\n    move(position: Position, apple: boolean) {\n        //console.debug(\"[SnakeLinkedList] Moving\")\n        if (apple) {\n            let newNextNode = new SnakeLinkedList([this.getPosition()]);\n            newNextNode.setNextNode(this.nextNode);\n            this.setNextNode(newNextNode);\n            this.setPosition(position);\n            return;\n        }\n        if (this.nextNode) {\n            let newNextNode = new SnakeLinkedList([this.getPosition()]);\n            newNextNode.setNextNode(this.nextNode);\n            this.setNextNode(newNextNode);\n            this.setPosition(position);\n            this.getTail().getPreviousNode().setNextNode(null);\n            this.updateTail();\n            //Recursive approach\n            /*this.nextNode.move(this.getPosition(), false)\n            this.tail = this.nextNode.getTail();\n            this.setPosition(position);*/\n            return;\n        }else{\n            this.setPosition(position);\n            this.tail = this\n        }\n    }\n    getPreviousNode() {\n        return this.previousNode;\n    }\n    updateTail() {\n        if(this.nextNode == null){\n            this.tail = this;\n            return;\n        }\n        this.nextNode.updateTail();\n        this.tail = this.nextNode.getTail();\n    }\n}\n\nexport default SnakeLinkedList;","import { GameUtils } from \"../game-utils/GameUtils\";\nimport Position from \"../game-utils/Position\";\nimport Direction from \"./Direction\";\nimport SnakeLinkedList from \"./SnakeLinkedList\";\n\nclass Snake {\n    private bodySet = new Set<number>();\n    private snake: SnakeLinkedList | null;\n    private rows: number;\n    private columns: number;\n\n    constructor(rows: number, columns: number, positions: Array<Position>) {\n        this.rows = rows\n        this.columns = columns\n        positions.forEach(position => this.bodySet.add(position.getRow() * this.columns + position.getColumn()))\n        this.snake = new SnakeLinkedList(positions);\n    }\n\n    isBody(position: Position) {\n        return this.bodySet.has(position.getRow() * this.columns + position.getColumn())\n    }\n\n    //returns if apple was eaten\n    move(movement: Direction, applePosition: Position): { appleEaten: boolean, affectedPositions: Position[] } {\n        let previousHeadPosition = this.snake.getPosition()\n        let nextHeadPosition = GameUtils.applyDirection(previousHeadPosition, movement);\n        let isApple = nextHeadPosition.equals(applePosition);\n        let previousTail = this.snake.getTail().getPosition()\n        if (!isApple) {\n            let tailPositionID = this.snake.getTail().getPosition().getRow() * this.columns + this.snake.getTail().getPosition().getColumn();\n            this.bodySet.delete(tailPositionID); //delete to avoid unexistant colision\n            if(!GameUtils.isValidPosition(nextHeadPosition, [this.rows, this.columns], this)){\n                throw new Error(\"Collision\")\n            };\n        }\n        this.bodySet.add(nextHeadPosition.getRow() * this.columns + nextHeadPosition.getColumn());\n        \n        this.snake.move(nextHeadPosition, isApple);\n        \n        let affectedPositons: Position[] = []\n        // Add previous head to remove color from body if it exists\n        if (this.getSize()>1){\n            affectedPositons.push(previousHeadPosition);\n        }\n        // Add the next head\n        affectedPositons.push(nextHeadPosition);\n\n        // If we have not eaten an apple then we add the tail (to remove it)\n        if (!isApple){\n            affectedPositons.push(previousTail)\n        }\n        return {\n            appleEaten: isApple,\n            affectedPositions: affectedPositons\n        };\n\n    }\n\n    getSize() {\n        return this.bodySet.size;\n    }\n\n\n    isHead(position: Position) {\n        return this.snake.getPosition().equals(position)\n    }\n\n\n    getHeadPosition(): Position {\n        return this.snake.getPosition();\n    }\n}\n\n\n\nexport default Snake;","import React from 'react';\nimport ScoreBoard from '../../components/ScoreBoard/ScoreBoard';\nimport SnakeBoard from '../../components/SnakeBoard/SnakeBoard';\nimport Algorithm from '../game-utils/Algorithm';\nimport Position from '../game-utils/Position';\nimport AStarPlayer from '../players/AStarPlayer';\nimport HamiltonianPlayer from '../players/HamiltonianPlayer';\nimport HumanPlayer from '../players/HumanPlayer';\nimport Player from '../players/Player';\nimport Direction from './Direction';\nimport Snake from './Snake';\n\nclass SnakeGame {\n    // Game state variables\n    private board: React.RefObject<SnakeBoard>;\n    private scoreBoard: React.RefObject<ScoreBoard>;\n    private applePosition: Position;\n    private rows: number;\n    private columns: number;\n    private snake: Snake;\n    private lastMovement: Direction;\n    private isMoving: boolean;\n\n    //Game execution\n    private keepMoving: number;\n    private speedControl: number;\n\n    //Game stats\n    private speed: number;\n    private score: number;\n    private steps: number;\n    private gameCount: number = 0;\n    private player: Player;\n    private setIsGameOver: (isGameOver: boolean) => void;\n\n    constructor(rows: number, columns: number, speed: number, board: React.RefObject<SnakeBoard>, scoreBoard: React.RefObject<ScoreBoard>, player: Player, setIsGameOver: (isGameOver: boolean) => void) {\n        this.rows = rows;\n        this.columns = columns;\n        this.board = board\n        this.scoreBoard = scoreBoard\n        this.speed = speed / 10;\n        this.player = player;\n        this.setIsGameOver = setIsGameOver;\n        this.initializeGame()\n    }\n\n    initializeGame() {\n        if (this.gameCount > 1) {\n            this.clearInterval();\n        }\n        this.player.init()\n        this.player.setGame(this);\n        //snake\n        let initialPosition = this.getRandomInitialPosition();\n        this.snake = new Snake(this.rows, this.columns, [initialPosition]);\n        this.applePosition = this.getRandomApplePosition();\n        this.score = 0;\n        this.lastMovement = null;\n        this.isMoving = false;\n        this.gameCount += 1\n        this.setInitialColors();\n\n    }\n    resetInterval() {\n        this.speedControl = window.setTimeout(() => {\n            this.keepMoving = window.requestAnimationFrame(() => {\n                if (this.isMoving) {\n                    this.move();\n                }\n            });\n        }, this.speed);\n    }\n    private clearInterval() {\n        clearTimeout(this.speedControl)\n        window.cancelAnimationFrame(this.keepMoving);\n    }\n\n    setSpeed(speed: number) {\n        this.speed = speed;\n    }\n\n    getPlayer(): Player {\n        return this.player;\n    }\n    setPlayer(algorithm: Algorithm) {\n        this.pause();\n        switch (algorithm) {\n            case Algorithm.HUMAN:\n                this.player = new HumanPlayer();\n                break;\n            case Algorithm.HAMILTONIANCYCLE:\n                this.player = new HamiltonianPlayer();\n                break;\n            default:\n                this.player = new AStarPlayer();\n                break;\n        }\n        this.initializeGame();\n    }\n    getRandomApplePosition(): Position {\n        let row = Math.floor(Math.random() * (this.rows - 1));\n        let column = Math.floor(Math.random() * (this.columns - 1));\n        let position = new Position(row, column);\n        while (this.snake.isBody(position) || this.snake.isHead(position)) {\n            row = Math.floor(Math.random() * (this.rows));\n            column = Math.floor(Math.random() * (this.columns));\n            position.setRow(row);\n            position.setColumn(column);\n        }\n        return position;\n    }\n\n    move(): void {\n        this.player.getNextMove()\n            .then(nextMovement => {\n                this.isMoving = true;\n                let result = this.snake.move(nextMovement, this.applePosition);\n                this.setLastMovement(nextMovement);\n                this.scoreBoard.current.increaseSteps();\n\n                if (result.appleEaten) {\n                    this.scoreBoard.current.increaseScore();\n                    //console.debug(\"[SnakeGame] Eating apple\")\n                    this.score += 1;\n                    this.applePosition = this.getRandomApplePosition();\n                    result.affectedPositions.push(this.applePosition);\n                }\n\n                //console.debug(`[SnakeGame] updating ${result.affectedPositions.length} positions`)\n                result.affectedPositions.forEach(affectedPosition => this.setSinglePosition(affectedPosition));\n                this.resetInterval();\n            }).catch(error => {\n                console.log(error);\n                this.clearInterval();\n                this.scoreBoard.current.saveGame();\n                this.setIsGameOver(true);\n            });\n    }\n\n    getRandomInitialPosition(): Position {\n        return new Position(\n            Math.floor(Math.random() * (this.rows - this.rows / 2)) + Math.floor(this.rows / 4),\n            Math.floor(Math.random() * (this.columns - this.columns / 2)) + Math.floor(this.columns / 4)\n        );\n    }\n\n\n    getBoard() {\n        return this.board;\n    }\n\n    getSnakeLength() {\n        return this.snake.getSize();\n    }\n    getLastMovement(): Direction {\n        return this.lastMovement;\n    }\n    setLastMovement(movement: Direction) {\n        this.lastMovement = movement;\n    }\n    isSnakeMoving(): boolean {\n        return this.isMoving;\n    }\n\n    getApplePosition() {\n        return this.applePosition;\n    }\n    pause() {\n        this.clearInterval()\n        this.isMoving = false;\n    }\n\n    resume() {\n        if (!this.isMoving) {\n            this.resetInterval();\n            this.isMoving = true;\n        }\n    }\n\n    getScore() {\n        return this.score;\n    }\n\n    getSteps() {\n        return this.steps;\n    }\n    getDimensions(): [number, number] {\n        return [this.rows, this.columns];\n    }\n\n    setBoard(board: React.RefObject<SnakeBoard>) {\n        this.board = board;\n    }\n\n\n    getSnake(): Snake {\n        return this.snake\n    }\n\n    setSinglePosition(position: Position, classNames: string[] = []) {\n        if (this.getApplePosition().equals(position)) {\n            classNames.push('apple')\n        } else {\n\n            if (this.snake.isBody(position)) {\n                classNames.push('body')\n            }\n            if (this.snake.isHead(position)) {\n                classNames.push('head')\n            }\n        }\n        if (position.getRow() & 1) {\n            classNames.push(position.getColumn() & 1 ? 'dark-cell' : 'light-cell');\n        } else {\n            classNames.push(position.getColumn() & 1 ? 'light-cell' : 'dark-cell');\n        }\n\n        this.board.current.setPosition(position, classNames);\n    }\n    setInitialColors() {\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.columns; j++) {\n                this.setSinglePosition(new Position(i, j));\n            }\n\n        }\n    }\n\n    getHeadSnakePosition(): Position {\n        return this.snake.getHeadPosition()\n    }\n}\n\n\nexport default SnakeGame;","import React from 'react'\nimport './GameOverInfo.css'\nfunction GameOverInfo(props : {title: string, content: string}) {\n\n    return (\n        <div className=\"game-over-info-container\">\n        <div className=\"game-over-info-title\">{props.title}</div>\n        <div className=\"game-over-info-content\">{props.content}</div>\n        </div>\n    )\n}\n\nexport default GameOverInfo\n\n","import React from 'react'\n\nfunction GameOverInfos(props) {\n    return (\n        <div className=\"game-over-infos-container\">\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default GameOverInfos\n\n","import React from 'react';\nimport './GameOver.css';\nimport GameOverInfo from './GameOverInfo';\nimport GameOverInfos from './GameOverInfos';\n\nfunction GameOver(props: { show: boolean, restartGameCallback: () => void, clearScoreBoard: () => void }) {\n    if (!props.show) {\n        return null;\n    }\n    return (\n        <div className=\"game-over-modal\">\n            <div className=\"game-over-container\">\n                <div className=\"game-over-title\">\n                    <p>GAME OVER</p>\n                </div>\n                <GameOverInfos>\n                    <GameOverInfo title={'Algorithm'} content={'Human'} />\n                    <GameOverInfo title={'Score'} content={'20'} />\n                    <GameOverInfo title={'Avg Steps'} content={'20'} />\n                </GameOverInfos>\n                <div style={{\n                    height: '1px',\n                    width: '80%',\n                    marginTop: '2vh',\n                    backgroundColor: 'rgb(51, 51, 51)'\n                }}></div>\n                <div className=\"game-over-options\">\n                    <button className=\"reset table game-over-button\" onClick={() => { props.clearScoreBoard(); }}><i className=\"fas fa-undo-alt\"></i></button>\n                    <button className=\"resume game-over-button\" onClick={() => { props.restartGameCallback(); }}><i className=\"fas fa-2x fa-play-circle\"></i></button>\n                    <button className=\"reset home game-over-button\" onClick={() => { props.restartGameCallback(); }}><i className=\"fas fa-home\"></i></button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default GameOver\n\n","import React from 'react'\nimport Algorithm from '../../game/game-utils/Algorithm';\nimport './ScoreBoard.css'\n\nclass ScoreBoard extends React.Component<{},\n    {\n        firstScore: { id: number, algorithm: string, score: number, stepCount, avgSteps: number }\n        scoreList: { id: number, algorithm: string, score: number, stepCount, avgSteps: number }[]\n    }> {\n    clearScoreBoard() {\n        this.setState(prevState=>{\n            return {\n                firstScore: {\n                    id: 0,\n                    algorithm: prevState.firstScore.algorithm.toString(),\n                    score: prevState.firstScore.score,\n                    stepCount: prevState.firstScore.stepCount,\n                    avgSteps: Math.round(((prevState.firstScore.stepCount / (prevState.firstScore.score+1)) + Number.EPSILON) * 100) / 100\n                },\n                scoreList: []\n            }\n        })\n    }\n\n    private id: number = 0;\n    constructor(props: { algorithm: Algorithm }) {\n        super(props);\n        this.state = this.getInitialState(props.algorithm);\n\n    }\n\n    getInitialState(algorithm: Algorithm) {\n        return {\n            firstScore:\n            {\n                id: 0,\n                algorithm: algorithm.toString(),\n                score: 0,\n                stepCount: 0,\n                avgSteps: -1\n            },\n            scoreList: []\n        }\n\n    }\n    getNewState(increase: number = 0) {\n        return {\n            firstScore:\n            {\n                id: this.state.firstScore.id + increase,\n                algorithm: this.state.firstScore.algorithm.toString(),\n                score: 0,\n                stepCount: 0,\n                avgSteps: -1\n            },\n            scoreList: this.state.scoreList\n        }\n    }\n    setAlgorithm(algorithm: Algorithm) {\n        let newState = null;\n        switch (algorithm) {\n            case Algorithm.HUMAN:\n                newState = this.getNewState();\n                newState.algorithm = \"Human\";\n                this.setState(newState);\n                break;\n            case Algorithm.HAMILTONIANCYCLE:\n                newState = this.getNewState();\n                newState.algorithm = \"Hamiltonian\";\n                this.setState(newState);\n                break;\n            default:\n                newState = this.getNewState();\n                newState.algorithm = \"A*\";\n                this.setState(newState);\n                break;\n        }\n    }\n\n    increaseScore() {\n        this.setState(prevState => {\n            return {\n                firstScore: {\n                    id: prevState.firstScore.id,\n                    algorithm: prevState.firstScore.algorithm.toString(),\n                    score: prevState.firstScore.score + 1,\n                    stepCount: prevState.firstScore.stepCount,\n                    avgSteps: Math.round(((prevState.firstScore.stepCount / (prevState.firstScore.score+1)) + Number.EPSILON) * 100) / 100\n                },\n                scoreList: prevState.scoreList\n            };\n        })\n    }\n\n    increaseSteps() {\n        this.setState(prevState => {\n            return {\n                firstScore: {\n                    id: prevState.firstScore.id,\n                    algorithm: prevState.firstScore.algorithm.toString(),\n                    score: prevState.firstScore.score ,\n                    stepCount: prevState.firstScore.stepCount+ 1,\n                    avgSteps: prevState.firstScore.avgSteps\n                },\n                scoreList: prevState.scoreList\n            };\n        })\n    }\n\n    saveGame() {\n        this.setState(prevState => {\n            return {\n                firstScore: this.getNewState(1).firstScore,\n                scoreList: [prevState.firstScore].concat(prevState.scoreList)\n            };\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"score-board-summary-table-container\">\n                <table className=\"score-board-summary-table\">\n                    <thead>\n                        <tr>\n                            <td>GAME ID</td>\n                            <td>ALGORITHM</td>\n                            <td>SCORE</td>\n                            <td>STEPS</td>\n                            <td>AVG STEPS</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>{`#${this.state.firstScore.id}`}</td>\n                            <td>{this.state.firstScore.algorithm}</td>\n                            <td>{this.state.firstScore.score}</td>\n                            <td>{this.state.firstScore.stepCount}</td>\n                            <td>{this.state.firstScore.avgSteps}</td>\n                        </tr>\n                        {this.state.scoreList.map(row => {\n                            return (<tr>\n                                <td>{`#${row.id}`}</td>\n                                <td>{row.algorithm}</td>\n                                <td>{row.score}</td>\n                                <td>{row.stepCount}</td>\n                                <td>{row.avgSteps}</td>\n                            </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n\n    }\n\n}\nexport default ScoreBoard;\n\n","import React from 'react';\nimport './Settings.css';\nimport Algorithm from '../../game/game-utils/Algorithm';\nfunction Settings(props: { setAlgorithm: (algorithm:Algorithm) => void,\n                           setSpeed: (speed:number) => void,\n                           changeVisualize: () => void}) {\n  return (\n    <div style={{\n      flex: '1',\n      width: '100%',\n      padding: '10px 20px',\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      backgroundColor: 'rgba(255,255,255,0.50)',\n      position:'relative'\n    }}>\n\n      <div className=\"select-algorithm \">\n        <h3>Select Speed</h3>\n        <input type=\"range\" min=\"1\" max=\"1000\" defaultValue=\"500\" onChange={(e)=>props.setSpeed(1000-e.currentTarget.valueAsNumber)}></input>\n      </div>\n      <div className=\"select-algorithm \">\n        <h3>Visualize</h3>\n        <input type=\"checkbox\" defaultChecked onChange={(e)=> {props.changeVisualize()}}></input>\n      </div>\n      <div className=\"select-algorithm\">\n        <h3>Algorithm</h3>\n        <label className=\"setting-algorithm-radio-container\" >Human\n          <input type=\"radio\" name=\"radio\" defaultChecked onChange={(e) => { if ('on' === e.currentTarget.value) { props.setAlgorithm(Algorithm.HUMAN) } }} />\n          <span className=\"checkmark\"></span>\n        </label>\n        <label className=\"setting-algorithm-radio-container\">A*\n          <input type=\"radio\" name=\"radio\" onChange={(e) => { if ('on' === e.currentTarget.value) { props.setAlgorithm(Algorithm.ASTAR) } }} />\n          <span className=\"checkmark\"></span>\n        </label>\n        {/* <label className=\"setting-algorithm-radio-container\">Hamiltonian\n          <input type=\"radio\" name=\"radio\" disabled={true} onChange={(e) => { if ('on' === e.currentTarget.value) { props.setAlgorithm(Algorithm.HAMILTONIANCYCLE) } }} />\n          <span className=\"checkmark\"></span>\n        </label>\n        <label className=\"setting-algorithm-radio-container\">Smart Hamiltonian\n          <input type=\"radio\" name=\"radio\" disabled={true} onChange={(e) => { if ('on' === e.currentTarget.value) { props.setAlgorithm(Algorithm.ASTAR) } }} />\n          <span className=\"checkmark\"></span>\n        </label>\n        <label className=\"setting-algorithm-radio-container\" >Neural Net\n          <input type=\"radio\" name=\"radio\" disabled={true} onChange={(e) => { if ('on' === e.currentTarget.value) { props.setAlgorithm(Algorithm.ASTAR) } }} />\n          <span className=\"checkmark\"></span>\n        </label> */}\n\n      </div>\n\n      <div className=\"instructions\">\n        Press ENTER to start playing\n      </div>\n    </div>\n  )\n}\n\nexport default Settings\n\n","import React from 'react';\nimport './SnakeBoard'\nclass Square extends React.Component<{},{classNames: string[]}>{\n  \n  constructor(props : {classNames: string[]}){\n      super(props);\n      this.state = {classNames: props.classNames};\n  }\n\n  changeColor(classNames:string[]){\n      this.setState({classNames: classNames})\n  }\n  render(){\n      return <div className={this.state.classNames.join(\" \")}/>\n  } \n}\nexport default Square;\n","import React from 'react';\nimport Position from '../../game/game-utils/Position';\nimport './SnakeBoard.css';\nimport Square from './Square';\n\nclass SnakeBoard extends React.Component<{}, { score: number, length: number }> {\n  private rows: number;\n  private columns: number;\n  private boardSquares: Array<Array<React.RefObject<Square>>>;\n  private boardProps: Array<Array<{ classNames: string[] }>>;\n\n  constructor(props: { rows: number, columns: number, speed: number }) {\n    super(props);\n    this.rows = props.rows;\n    this.columns = props.columns;\n    this.state = { score: 0, length: 1 };\n    this.initializeBoard();\n  }\n\n  initializeBoard() {\n    this.boardSquares = new Array<Array<React.RefObject<Square>>>(this.rows);\n    this.boardProps = new Array<Array<{ classNames: [string] }>>(this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      this.boardSquares[i] = new Array<React.RefObject<Square>>(this.columns);\n      this.boardProps[i] = new Array<{ classNames: [string] }>(this.columns);\n      for (let j = 0; j < this.columns; j++) {\n        this.boardProps[i][j] = { classNames: ['light-cell'] };\n        this.boardSquares[i][j] = React.createRef<Square>();\n      }\n    }\n  }\n\n\n  setPosition(position: Position, classNames: string[]) {\n    this.boardProps[position.getRow()][position.getColumn()].classNames = classNames;\n    this.boardSquares[position.getRow()][position.getColumn()].current.changeColor(classNames);\n  }\n\n  //remove visualization attributes except path\n  clearVisualization() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        let newClassNames = this.boardProps[i][j].classNames\n                                .filter(className => className !== \"expanded\")\n                                .filter(className => className !== \"explored\");\n        if (newClassNames.length !== this.boardProps[i][j].classNames.length) {\n          this.setPosition(new Position(i, j), newClassNames);\n        }\n\n      }\n    }\n  }\n\n\n  displayBoard() {\n    return this.boardProps.flatMap((row, i) =>\n      row.map((props, j) =>\n        <Square key={[i, j].join('-')} ref={this.boardSquares[i][j]} {...props} />\n      ))\n  }\n\n\n  render() {\n    console.log(\"Rendering Board\")\n    return (\n\n      <div className='grid'\n        style={{\n          gridTemplate: `repeat(${this.rows}, 1fr) /repeat(${this.columns},1fr)`\n        }}>\n        {this.displayBoard()}\n      </div>\n    );\n  }\n}\n\nexport default SnakeBoard;\n","import React, { useEffect, useState } from 'react'\nimport SnakeGame from '../../game/controls/SnakeGame';\nimport Algorithm from '../../game/game-utils/Algorithm';\nimport HumanPlayer from '../../game/players/HumanPlayer';\nimport GameOver from '../GameOver/GameOver';\nimport ScoreBoard from '../ScoreBoard/ScoreBoard';\nimport Settings from '../Settings/Settings';\nimport SnakeBoard from '../SnakeBoard/SnakeBoard';\nimport './SnakeGameUI.css';\nlet size = 21;\nlet speed = 500;\nlet propsBoard = { rows: size, columns: size, speed: speed };\nlet board = React.createRef<SnakeBoard>();\nlet scoreBoard = React.createRef<ScoreBoard>();\nlet snakeGame: SnakeGame = null;\n\n\nfunction setAlgorithm(algorithm: Algorithm) {\n    console.debug(`Changin Player ${algorithm}`);\n    snakeGame.setPlayer(algorithm);\n}\n\nfunction changeVisualize() {\n    console.debug(`Changing visualize`);\n    snakeGame.getPlayer().changeVisualize();\n}\n\nfunction setSpeed(speed: Algorithm) {\n    console.debug(`Changing speed ${speed}`);\n    snakeGame.setSpeed(speed);\n}\nfunction SnakeGameUI() {\n    const [isGameOver, setIsGameOver] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                snakeGame.resume();\n            }\n        })\n    })\n    //Callbacks\n    let restartGameCallback: () => void = () => { setIsGameOver(false); snakeGame.initializeGame(); };\n    let clearScoreBoard: () => void = () => { scoreBoard.current.clearScoreBoard() };\n\n    useEffect(() => {\n        if (snakeGame === null) {\n            snakeGame = new SnakeGame(size, size, speed, board, scoreBoard, new HumanPlayer(), setIsGameOver);\n        } else {\n            snakeGame.setBoard(board);\n        }\n    }, []);\n\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: '100vh',\n            width: '100vw',\n            backgroundColor: '#578A34'\n        }}>\n            <div className='container'>\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    height: '100%',\n                    width: '100%',\n                    backgroundColor: 'rgba(255,255,255,0.30)'\n\n                }}>\n                    <div style={{\n                        display: 'flex',\n                        top: '1em',\n                        width: '100%',\n                        backgroundColor: 'rgba(255,255,255,0.60)',\n                        justifyContent: 'center',\n                        alignContent: 'center'\n                    }}>\n                        {/* <a className=\"no-style-anchor\" href=\"/home\"><i className=\"fas fa-2x fa-arrow-left\"></i></a> */}\n                        <h1 style={{\n                            fontFamily: 'Black Ops One, cursive',\n                            flex: 8, textAlign: 'center'\n                        }}>Snake Game AI</h1>\n                    </div>\n                    <ScoreBoard ref={scoreBoard} {...{algorithm:Algorithm.HUMAN}}/>\n                    <Settings setAlgorithm={setAlgorithm} setSpeed={setSpeed} changeVisualize={changeVisualize}/>\n                </div>\n                <div style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    height: '100%',\n                    width: '100%'\n                }}>\n\n                    <SnakeBoard ref={board} {...propsBoard} />\n                </div>\n            </div>\n            <GameOver show={isGameOver} restartGameCallback={restartGameCallback} clearScoreBoard={clearScoreBoard} />\n        </div>\n\n\n    );\n\n}\n\n\nexport default SnakeGameUI;\n","import React from 'react';\nimport SnakeGameUI from '../SnakeGameUI/SnakeGameUI';\n\nfunction Home() {\n\n  return (\n    <SnakeGameUI/>\n  );\n}\n\nexport default Home;\n","import React from 'react'\n\nfunction Info(props) {\n    return (\n        <>\n        <h1>\n            Welcome to my Snake-AI visualizer project\n        </h1>\n        <p>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Unde, delectus? Aperiam ipsa quidem maiores, aut consectetur at? Voluptatum, magni? Saepe incidunt nihil deserunt vitae error ad sequi dolorem quia harum.\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur sed dolorum fugit iste et vitae ratione repellat animi incidunt ut aut asperiores quasi consectetur numquam nesciunt voluptas neque, recusandae hic.\n        </p>\n        </>\n    )\n}\n\nexport default Info\n\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Info from './components/Info/Info';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div>\n        <Switch>\n          <Route\n            path=\"/info\"\n            component={Info} />\n          <Route\n            path=\"/\"\n            component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}